# egz1Atest_spec.py

ALLOWED_TIME = 1000


# format testów
# TESTS = [ {"arg":arg0, "hint": hint0}, {"arg":arg1, "hint": hint1}, ... ]

TEST_SPEC = [
# (test (G,V,s,t,r),hint)
(0,[[[(1,9),(2,2)],[(0,9),(3,2),(4,6)],[(0,2),(3,7),(5,1)],[(1,2),(2,7),(4,2),(5,3)],[(1,6),(3,2),(6,1)],[(2,1),(3,3),(6,8)],[(4,1),(5,8)]],[25,30,20,15,5,10,0],0,6,7],6),  # zadanie z tematu
(1,[[[(1,9),(2,2)],[(0,9),(3,2),(4,6)],[(0,2),(3,7),(5,1)],[(1,2),(2,7),(4,2),(5,3)],[(1,6),(3,2),(6,1)],[(2,1),(3,3),(6,8)],[(4,1),(5,8)]],[25,30,20,15,5,10,0],0,6,3],-3), # j.w, ale r=3
(2,[[[(1,9),(2,2)],[(0,9),(3,2),(4,6)],[(0,2),(3,7),(5,1)],[(1,2),(2,7),(4,2),(5,3)],[(1,6),(3,2),(6,1)],[(2,1),(3,3),(6,8)],[(4,1),(5,8)]],[25,30,20,15,5,10,0],1,2,7],-14),# j.w. ale s=1,t=2,r=7
(3,[[[(1,9),(2,2)],[(0,9),(3,2),(4,6)],[(0,2),(3,7),(5,1)],[(1,2),(2,7),(4,2),(5,3),(7,10)],[(1,6),(3,2),(6,1)],[(2,1),(3,3),(6,8)],[(4,1),(5,8)],[(3,10)]],[25,30,20,15,5,10,0,70],0,6,7],-7),  # dodatkowy zamek nr 7, polaczony z 3 drogą o koszcie 10
(4,[[[(1,9),(2,2)],[(0,9),(3,2),(4,6)],[(0,2),(3,7),(5,1)],[(1,2),(2,7),(4,2),(5,3),(7,10)],[(1,6),(3,2),(6,1)],[(2,1),(3,3),(6,8)],[(4,1),(5,8)],[(3,10)]],[25,30,20,15,5,10,0,70],0,6,13],9),  # j.w. ale r=13

(10, [], 12),
(102, [], 33),
(1003, [], 342),
(10005, [], 1398),
(100007, [], 4441),
]


from testy import MY_random

def my_randint(a,b):
  return a+MY_random()%(b-a+1)

def gentest(test, arg, hint ):
  if test<6:
    return arg,hint
  
  n = test

  G = [[] for _ in range(n)]

  for u in range(n):
    zb = set()
    for _ in range(my_randint(3,6)):
      while True:
        v = my_randint(0,n-1)
        if v!=u and v not in zb: break

      zb.add(v)

    k = my_randint(2,20)   
    G[u].append((v,k))
    G[v].append((u,k))

  s = my_randint(0,n-1)   
  while True:
    t = my_randint(0,n-1)   
    if s!=t: break

  V = [my_randint(0,99) for _ in range(n)]
  V[t] = 0

  r = my_randint(10,50)   

  return [G,V,s,t,r],hint
   

  
