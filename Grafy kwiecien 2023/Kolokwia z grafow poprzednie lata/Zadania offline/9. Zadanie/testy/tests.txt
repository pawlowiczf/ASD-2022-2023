G = [[-1, 1,-1, 4, 1],
     [ 1,-1, 1,-1, 4],
     [-1, 1,-1, 1, 4],
     [ 4,-1, 1,-1, 1],
     [ 1, 4, 4, 1,-1]]

LEN = 5


G = [[-1, 4, -1, -1, -1, -1, -1, 8, -1],
     [4, -1, 8, -1, -1, -1, -1, 11, -1],
     [-1, 8, -1, 7, -1, 4, -1, -1, 2],
     [-1, -1, 7, -1, 9, 14, -1, -1, -1],
     [-1, -1, -1, 9, -1, 10, -1, -1, -1],
     [-1, -1, 4, 14, 10, -1, 2, -1, -1],
     [-1, -1, -1, -1, -1, 2, -1, 1, 6],
     [8, 11, -1, -1, -1, -1, 1, -1, 7],
     [-1, -1, 2, -1, -1, -1, 6, 7, -1]]
LEN = 14




def undirected_weighted_graph_matrix(E: 'array of edges'):
    # Find a number of vertices
    n = 0
    for e in E:
        n = max(n, e[0], e[1])
    n += 1
    # Create a graph
    G = [[-1] * n for _ in range(n)]  # -1 means no edge
    for e in E:
        G[e[0]][e[1]] = e[2]
        G[e[1]][e[0]] = e[2]
    return G
	
	
E = [(0, 1, 3), (1, 2, 2), (0, 6, 2), (6, 7, 1), (6, 5, 3), (5, 7, 1),
    (5, 4, 8), (3, 4, 20), (8, 7, 7), (8, 1, 1), (2, 3, 5), (3, 8, 1),
    (7, 4, 2)]
LEN = 5


E = [(0, 1, 9), (1, 2, 18), (2, 3, 15), (3, 4, 20), (4, 5, 5), (5, 6, 5), (6, 7, 7), (7, 8, 10), (8, 9, 8),
     (0, 15, 10), (1, 15, 4), (1, 14, 5), (15, 14, 4), (14, 3, 10), (15, 13, 6), (13, 14, 5), (16, 15, 6),
     (16, 13, 2), (18, 17, 2), (17, 16, 3), (16, 12, 5), (12, 13, 4), (13, 11, 10), (11, 10, 4),
     (12, 10, 12), (10, 5, 10), (11, 4, 6)]
LEN = 11


E = [(0, 1, 17), (1, 2, 30), (2, 3, 2), (3, 4, 47), (4, 5, 88), (5, 6, 0), (7, 6, 3), (7, 8, 7), (8, 9, 0), (9, 10, 12),
     (10, 11, 40), (11, 0, 13), (11, 14, 1), (14, 12, 7), (12, 13, 18), (13, 1, 120), (3, 16, 81), (16, 15, 63),
     (15, 17, 90), (17, 5, 37), (11, 23, 0), (23, 22, 67), (22, 21, 73), (21, 24, 11), (24, 23, 2), (21, 20, 18),
     (20, 19, 96), (19, 18, 50), (18, 29, 4), (29, 20, 22), (18, 5, 1), (21, 25, 97), (25, 26, 26), (26, 27, 30),
     (27, 28, 8), (28, 20, 11), (26, 30, 100), (30, 27, 52), (30, 31, 1), (31, 32, 20), (31, 33, 0), (34, 26, 4),
     (35, 26, 3), (36, 26, 2), (27, 37, 10), (27, 38, 8), (27, 39, 1)]
LEN = 120
